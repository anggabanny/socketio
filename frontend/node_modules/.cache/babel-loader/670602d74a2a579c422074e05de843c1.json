{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/anggabanny/Documents/Optimus Digital/SOCKETIO/frontend/src/chat/chat.jsx\";\nimport React from 'react';\nimport { ChannelList } from './channelList';\nimport './chat.scss';\nimport { MessagesPanel } from './MessagesPanel';\nimport socketClient from \"socket.io-client\";\nconst SERVER = \"http://127.0.0.1:8080\";\nexport class Chat extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      channels: null,\n      socket: null,\n      channel: null\n    };\n\n    this.configureSocket = () => {\n      var socket = socketClient(SERVER);\n      socket.on('connection', () => {\n        if (this.state.channel) {\n          this.handleChannelSelect(this.state.channel.id);\n        }\n      });\n      socket.on('channel', channel => {\n        let channels = this.state.channels;\n        channels.forEach(c => {\n          if (c.id === channel.id) {\n            c.participants = channel.participants;\n          }\n        });\n        this.setState({\n          channels\n        });\n      });\n      socket.on('message', message => {\n        let channels = this.state.channels;\n        channels.forEach(c => {\n          if (c.id === message.channel_id) {\n            if (!c.messages) {\n              c.messages = [message];\n            } else {\n              c.messages.push(message);\n            }\n          }\n        });\n        this.setState({\n          channels\n        });\n      });\n      this.socket = socket;\n    };\n\n    this.loadChannels = async () => {\n      fetch('http://localhost:8080/getChannels').then(async response => {\n        let data = await response.json();\n        this.setState({\n          channels: data.channels\n        });\n      });\n    };\n\n    this.handleChannelSelect = id => {\n      let channel = this.state.channels.find(c => {\n        return c.id === id;\n      });\n      this.setState({\n        channel\n      });\n      this.socket.emit('channel-join', id, ack => {});\n    };\n\n    this.handleSendMessage = (channel_id, text) => {\n      this.socket.emit('send-message', {\n        channel_id,\n        text,\n        senderName: this.socket.id,\n        id: Date.now()\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.loadChannels();\n    this.configureSocket();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-app\",\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        channels: this.state.channels,\n        onSelectChannel: this.handleChannelSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MessagesPanel, {\n        onSendMessage: this.handleSendMessage,\n        channel: this.state.channel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/anggabanny/Documents/Optimus Digital/SOCKETIO/frontend/src/chat/chat.jsx"],"names":["React","ChannelList","MessagesPanel","socketClient","SERVER","Chat","Component","state","channels","socket","channel","configureSocket","on","handleChannelSelect","id","forEach","c","participants","setState","message","channel_id","messages","push","loadChannels","fetch","then","response","data","json","find","emit","ack","handleSendMessage","text","senderName","Date","now","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ChannelList } from './channelList';\nimport './chat.scss';\nimport { MessagesPanel } from './MessagesPanel';\nimport socketClient from \"socket.io-client\";\nconst SERVER = \"http://127.0.0.1:8080\";\nexport class Chat extends React.Component {\n\n    state = {\n        channels: null,\n        socket: null,\n        channel: null\n    }\n    socket;\n    componentDidMount() {\n        this.loadChannels();\n        this.configureSocket();\n    }\n\n    configureSocket = () => {\n        var socket = socketClient(SERVER);\n        socket.on('connection', () => {\n            if (this.state.channel) {\n                this.handleChannelSelect(this.state.channel.id);\n            }\n        });\n        socket.on('channel', channel => {\n            \n            let channels = this.state.channels;\n            channels.forEach(c => {\n                if (c.id === channel.id) {\n                    c.participants = channel.participants;\n                }\n            });\n            this.setState({ channels });\n        });\n        socket.on('message', message => {\n            \n            let channels = this.state.channels\n            channels.forEach(c => {\n                if (c.id === message.channel_id) {\n                    if (!c.messages) {\n                        c.messages = [message];\n                    } else {\n                        c.messages.push(message);\n                    }\n                }\n            });\n            this.setState({ channels });\n        });\n        this.socket = socket;\n    }\n\n    loadChannels = async () => {\n        fetch('http://localhost:8080/getChannels').then(async response => {\n            let data = await response.json();\n            this.setState({ channels: data.channels });\n        })\n    }\n\n    handleChannelSelect = id => {\n        let channel = this.state.channels.find(c => {\n            return c.id === id;\n        });\n        this.setState({ channel });\n        this.socket.emit('channel-join', id, ack => {\n        });\n    }\n\n    handleSendMessage = (channel_id, text) => {\n        this.socket.emit('send-message', { channel_id, text, senderName: this.socket.id, id: Date.now() });\n    }\n\n    render() {\n\n        return (\n            <div className='chat-app'>\n                <ChannelList channels={this.state.channels} onSelectChannel={this.handleChannelSelect} />\n                <MessagesPanel onSendMessage={this.handleSendMessage} channel={this.state.channel} />\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}